import os
import numpy as np

def compile_string(input_list):
	ls_str = '['
	for i in range(len(input_list)):
		ls_str += str(input_list[i])
		ls_str += ','
	ls_str = ls_str[0:-1]
	ls_str += ']'
	return ls_str

train_toggle = 3
# 1: train from scratch, save weights; 
# 2: train from existing weights
# 3: load weights, test and plot 

# refer to ReadMe in github repository for clarification of the following variable.
combs = [
    # tested examples:
    # CD_1D
    # [[32,32,32], [0,0,0,600], 50, 2048, [0], 0, "CD_1D", [1,1,1,1],"Res","lm",0],
    # [[32,32,32], [0,0,0,600], 50, 2048, [0], 0, "CD_1D", [1,1,1,1],"Dense","lm",0],
    # [[32,32,32], [3000,600,0,0], 50, 2048, [0], 2, "CD_1D", [1,1,0,0],"Dense","lm"],
    # [[32,32,32], [3000,600,0,0], 50, 2048, [0], 2, "CD_1D", [1,5,0,0],"Dense","lm"],
    # [[32,32,32,32], [3000,600,0,100], 50, 2048, [0], 2, "CD_1D", [1,1,1,1],"Dense","lm"],
    # [[32,32,32,32], [3000,600,0,100], 50, 2048, [0], 2, "CD_1D", [1,3,0,1],"Dense","lm"],
    # [[32,32,32,32], [3000,600,0,100], 50, 2048, [0], 2, "CD_1D", [1,3,0,3],"Dense","lm"],
    # [[32,32,32,32], [3000,600,0,100], 50, 2048, [0], 2, "CD_1D", [1,10,0,10],"Dense","lm"],
    # [[32,32,32,32], [3000,600,0,100], 5, 2048, [0], 2, "CD_1D", [1,10,0,1],"Dense","lm"],
    # [[32,32,32,32], [0,0,0,100], 5, 2048, [0], 2, "CD_1D", [1,10,0,1],"Dense","lm"],
    # [[32,32,32,32], [3000,600,0,0], 5, 2048, [0], 2, "CD_1D", [1,10,0,0],"Dense","lm"],
    # [[32,32,32,32], [3000,600,0,0], 50, 2048, [0], 2, "CD_1D", [1,3,0,0],"Dense","lm"],
    # [[32,32,32], [0,600,0,3000], 5, 2048, [0], 2, "CD_1D", [0,1,0,1],"Dense","lm"],
    # [[32,32,32,32], [3000,600,0,0], 50, 2048, [0], 2, "CD_1D", [1,1,0,0],"Dense","lm"],
    # [[32,32,32,32,32], [3000,600,0,0], 50, 2048, [0], 2, "CD_1D", [1,1,0,0],"Dense","lm"],
    # [[32,32,32], [3000,600,0,0], 50, 2048, [0], 2, "CD_1D", [1,3,0,0],"Dense","lm"],
    # [[32,32,32,32,32], [3000,600,0,0], 50, 2048, [0], 2, "CD_1D", [1,3,0,0],"Dense","lm"],
    # [[32,32,32,32,32,32], [3000,600,0,0], 50, 2048, [0], 2, "CD_1D", [1,3,0,0],"Dense","lm"],
    # [[32,32,32], [3000,600,0,0], 5, 2048, [0], 2, "CD_1D", [1,1,0,0],"Dense","lm"],
    # [[32,32,32,32], [3000,600,0,0], 5, 2048, [0], 2, "CD_1D", [1,1,0,0],"Dense","lm"],
    # [[32,32,32,32,32], [3000,600,0,0], 5, 2048, [0], 2, "CD_1D", [1,1,0,0],"Dense","lm"],
    # [[32,32,32,32,32,32], [3000,600,0,0], 5, 2048, [0], 2, "CD_1D", [1,1,0,0],"Dense","lm"],
    # [[64,64,64], [3000,600,0,0], 50, 2048, [0], 2, "CD_1D", [1,1,0,0],"Dense","lm"],
    # [[32,32,32], [3000,800,0,0], 50, 2048, [0], 2, "CD_1D", [1,1,0,0],"Dense","lm"],

    # [[32,32,32], [0,0,0,10], 1, 32, [0], 3, "CD_1D", [0,0,0,1],"RNN","lm"],
    # [[32,32], [0,0,0,1], 1, 32, [0], 3, "CD_1D", [0,0,0,1],"RNN","lm"],
    # [[32,32], [0,0,0,10], 1, 32, [0], 3, "CD_1D", [0,0,0,1],"RNN","lm"],
    
    # Burger
    # [[32,32,32,32], [0,0,0,100], 50, 128, [0], 0, "Burger", [1,1,1,1],"Dense","lm",1],    
    # [[32,32,32,32], [0,0,0,300], 50, 128, [0], 0, "Burger", [1,1,1,1],"Dense","lm",1],    
    # [[32,32,32,32], [0,0,0,500], 50, 128, [0], 0, "Burger", [1,1,1,1],"Dense","lm",1],    
    # [[32,32,32,32], [0,0,0,700], 50, 128, [0], 0, "Burger", [1,1,1,1],"Dense","lm",1],    
    # [[32,32,32], [0,0,0,500], 50, 128, [0], 0, "Burger", [1,1,1,1],"Dense","lm",1],    
    # [[32,32,32,32,32], [0,0,0,500], 50, 128, [0], 0, "Burger", [1,1,1,1],"Dense","lm",1],    
    # [[32,32,32,32,32,32], [0,0,0,500], 50, 128, [0], 0, "Burger", [1,1,1,1],"Dense","lm",1],    

    # [[32,32,32,32], [3000,600,0,300], 50, 128, [0], 2, "Burger", [1,1,0,1],"Dense","lm"], 
    # [[32,32,32,32], [5000,600,0,300], 50, 128, [0], 2, "Burger", [1,1,0,1],"Dense","lm"], 
    # [[32,32,32,32], [3000,800,0,300], 50, 128, [0], 2, "Burger", [1,1,0,1],"Dense","lm"], 
    # [[32,32,32,32], [3000,600,0,400], 50, 128, [0], 2, "Burger", [1,1,0,1],"Dense","lm"], 
    # [[32,32,32,32,32], [3000,600,0,300], 50, 128, [0], 2, "Burger", [1,1,0,1],"Dense","lm"],    
    # [[32,32,32,32,32,32], [3000,600,0,300], 50, 128, [0], 2, "Burger", [1,1,0,1],"Dense","lm"], 
    # [[32,32,32,32,32], [0,0,0,500], 50, 128, [0], 0, "Burger", [1,1,1,1],"Res","lm",1],    
    # [[32,32,32,32], [3000,600,0,400], 50, 128, [0], 2, "Burger", [1,1,0,1],"Res","lm"], 

    # Poisson
    # [[32,32,32,32], [0,0,0,100], 50, 128, [0], 0, "Poisson", [1,1,1,1],"Dense","lm",1],    
    # [[32,32,32,32], [0,0,0,300], 50, 128, [0], 0, "Poisson", [1,1,1,1],"Dense","lm",1],    
    # [[32,32,32,32], [0,0,0,500], 50, 128, [0], 0, "Poisson", [1,1,1,1],"Dense","lm",1],    
    # [[32,32,32,32], [0,0,0,700], 50, 128, [0], 0, "Poisson", [1,1,1,1],"Dense","lm",1],    
    # [[32,32,32], [0,0,0,500], 50, 128, [0], 0, "Poisson", [1,1,1,1],"Dense","lm",1],    
    # [[64,64,64,64], [0,0,0,500], 50, 128, [0], 0, "Poisson", [1,1,1,1],"Dense","lm",1],    
    # [[32,32,32,32,32], [0,0,0,500], 50, 128, [0], 0, "Poisson", [1,1,1,1],"Dense","lm",1],   
    # [[32,32,32,32,32,32], [0,0,0,500], 50, 128, [0], 0, "Poisson", [1,1,1,1],"Dense","lm",1],   

    # [[32,32,32,32], [3000,600,0,0], 50, 128, [0], 2, "Poisson", [1,1,0,0],"Dense","lm"],    
    # [[32,32,32,32], [3000,800,0,0], 50, 128, [0], 2, "Poisson", [1,1,0,0],"Dense","lm"],    
    # [[32,32,32,32], [5000,600,0,0], 50, 128, [0], 2, "Poisson", [1,1,0,0],"Dense","lm"],    
    # [[32,32,32], [3000,600,0,0], 50, 128, [0], 2, "Poisson", [1,1,0,0],"Dense","lm"],    
    # [[32,32,32,32,32], [3000,600,0,0], 50, 128, [0], 2, "Poisson", [1,1,0,0],"Dense","lm"],    
    # [[32,32,32,32,32,32], [3000,600,0,0], 50, 128, [0], 2, "Poisson", [1,1,0,0],"Dense","lm"], 
    # [[32,32,32], [0,0,0,500], 50, 128, [0], 0, "Poisson", [1,1,1,1],"Res","lm",1],    
    # [[32,32,32], [3000,600,0,0], 50, 128, [0], 2, "Poisson", [1,1,0,0],"Res","lm"],    

    ]
for i in range(len(combs)):
    comb = combs[i]
    layers_str = compile_string(comb[0])
    Ns_str = compile_string(comb[1])
    test_size = comb[2]
    space_n = comb[3]
    regular_alphas_str = compile_string(comb[4])
    sampling_method = comb[5]
    env_toggle = comb[6]
    type_weighting = compile_string(comb[7])
    net_toggle = comb[8]
    opt_toggle = comb[9]
    if len(comb)<11:
        input_str = "{0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10}".format(layers_str, env_toggle, sampling_method, Ns_str, test_size, space_n, regular_alphas_str,train_toggle,type_weighting,net_toggle, opt_toggle)
        os.system("python3 DEMO.py {0}".format(input_str))

    else: 
        L = comb[10]
        input_str = "{0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11}".format(layers_str, env_toggle, sampling_method, Ns_str, test_size, space_n, regular_alphas_str,train_toggle,type_weighting,net_toggle, opt_toggle, L)
        os.system("python3 DEMO.py {0}".format(input_str))
